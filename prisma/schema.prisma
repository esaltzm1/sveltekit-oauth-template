// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @unique
  username        String  @unique
  email           String  @unique
  isEmailVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(USER)

  authSession           Session[]
  oauthAccounts         OauthAccount[]
  hashedPassword        String?
  passwordResetToken    PasswordResetToken[]
  EmailVerificationCode EmailVerificationCode[]
}

model Session {
  id        String   @id @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model OauthAccount {
  providerId     OAuthProvider
  providerUserId String
  userId         String
  user           User          @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([providerId, providerUserId])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([expiresAt])
}

model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  expiresAt DateTime
  code      String
  email     String

  userId String @unique
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum OAuthProvider {
  google
  email
}
